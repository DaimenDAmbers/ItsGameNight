//
//  MessagesViewController.swift
//  gamenighttest2 MessagesExtension
//
//  Created by Daimen Ambers on 10/13/23.
//

import UIKit
import Messages
import EventKit

class MessagesViewController: MSMessagesAppViewController {
    static let storyboardIdentifier = "MessagesViewController"
    let eventHelper = EventHelper()
    var appState = AppState.home
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
        print("will become active")
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        print("did resign active")
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        presentViewController(for: conversation, with: presentationStyle)
        print("did receive")
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        // TODO: PHASE 2 - Could use this to save a calendar invite.
//        if let message = CalendarInvite(message: message) {
//            eventHelper.saveEvent(event: message.event, store: message.eventStore)
//        }
        print("Message sent")
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
        if let cancelMessage = CalendarInvite(message: message) {
            let eventStore = EKEventStore()
            guard let eventToRemove = eventStore.event(withIdentifier: cancelMessage.identifier!) else {
                fatalError("No event to remove.")
            }
            do {
                try eventStore.remove(eventToRemove, span: .thisEvent, commit: true)
                print("Event Removed.")
            } catch {
                print("Could not remove the event with the error: \(error)")
            }
        }
        
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
        removeAllChildViewControllers()
        print("Transition")
    }
    
    // FIXME: Changing presentation style will affect the calendar modal popup
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    // MARK: - Methods
    
    /// Presents the ViewContoller depending on the state of the application.
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        
        removeAllChildViewControllers()
        let controller: UIViewController
        
        self.appState = returnAppState(message: conversation.selectedMessage)
        
        switch presentationStyle {
        case .expanded:
            switch appState {
            case .gameInvite:
                
                if let calendarInvite = CalendarInvite(message: conversation.selectedMessage) {
                    controller = instantiateGameNightInviteViewController(with: calendarInvite)
                } else {
                    controller = instantiateHomeViewController(with: conversation)
                }
                
            default:
                controller = instantiateHomeViewController(with: conversation)
            }
        default:
            controller = instantiateHomeViewController(with: conversation)
        }

        
        addChild(controller)
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        NSLayoutConstraint.activate([
            controller.view.leftAnchor.constraint(equalTo: view.leftAnchor),
            controller.view.rightAnchor.constraint(equalTo: view.rightAnchor),
            controller.view.topAnchor.constraint(equalTo: view.topAnchor),
            controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        controller.didMove(toParent: self)
    }
    
    fileprivate func instantiateHomeViewController(with conversation: MSConversation) -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: HomeViewController.storyboardIdentifier) as? HomeViewController else {
            fatalError("Unable to instantiate a HomeViewController from the storyboard")
        }
        
        controller.conversation = conversation
        controller.delegate = self

        let navVC = UINavigationController(rootViewController: controller)
        
        return navVC
    }
    
    fileprivate func instantiateGameNightInviteViewController(with invite: CalendarInvite) -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: GameNightInviteViewController.storyboardIdentifier) as? GameNightInviteViewController else {
            fatalError("Unable to instantiate a GameNightViewController from the storyboard")
        }
        
        controller.invite = invite
        controller.delegate = self
        
        return controller
    }
    
    /// Composes a message for the Game Night Application.
    /// - Parameters:
    ///   - session: The conversation that the user currently has open.
    ///   - invite: A calender invite from the `CalendarInvite` Struct.
    /// - Returns: Returns a `MSMessage`.
    fileprivate func composeMessage(session: MSSession? = nil, with invite: CalendarInvite? = nil) -> MSMessage {
        var components = URLComponents()
        let layout = MSMessageTemplateLayout()
        
        if let myInvite = invite {
            components.queryItems = myInvite.queryItems
            print("inside composeMessage: \(myInvite.event.eventIdentifier)")
            
            layout.image = myInvite.image
            layout.caption = myInvite.caption
            layout.subcaption = myInvite.subCaption
        }
        

        print("Print the components: \(String(describing: components.queryItems))")

        
        let message = MSMessage(session: session ?? MSSession())
        message.url = components.url!
        message.layout = layout
        
        return message
    }
    
    /// Parse out the `appState` property in the URLComponents to set the correct game type from the conversation.
    /// - Parameter message: Take the current selected message.
    /// - Returns: The state of the app.
    fileprivate func returnAppState(message: MSMessage?) -> AppState {        
        guard let messageURL = message?.url else { return appState }
        guard let urlComponents = NSURLComponents(url: messageURL, resolvingAgainstBaseURL: false) else { return appState }
        guard let queryItems = urlComponents.queryItems else { return appState }
        
        for queryItem in queryItems {
            guard let value = queryItem.value else { continue }
            if queryItem.name == "App State" && value == AppState.gameInvite.rawValue {
                self.appState = .gameInvite
            }
        }
        
        return self.appState
    }
    
    /// Returns a random person from the group chat.
    /// - Returns: Returns the random person's name.
    fileprivate func returnPerson(from conversation: MSConversation?) -> String {
        guard let conversation = conversation else { fatalError("Could not find a conversation inside the selectRandomPerson function.") }
        
        var people = [String]()
        people.append(conversation.localParticipantIdentifier.uuidString)
        
        for person in conversation.remoteParticipantIdentifiers {
            people.append(person.uuidString)
        }
        
        // TODO: Uncomment to pull from conversation
        //    guard let name = people.randomElement() else {
        //        return "No names Available"
        //    }
        
        // TODO: This is testing purposes
        let testNames = ["Daimen", "Charlese", "Justin", "Austyn", "Ashley", "Tyson"]
        let name = testNames.randomElement()!
        
        
        print("Available names: \(people)")
        return name
    }
    
    // MARK: Convenience
    private func removeAllChildViewControllers() {
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
    }
}

// MARK: - Extensions
extension MessagesViewController: MessageDelegate {
    func changeAppState(to currentState: AppState) {
        print("The current app state is: \(currentState)")
        appState = currentState
    }
    
    
    func changePresentationStyle(_ style: MSMessagesAppPresentationStyle) {
        requestPresentationStyle(style)
    }
    
    func sendMessage(with invite: CalendarInvite?) {
        guard let conversation = activeConversation else { fatalError("Could not send a message.") }

        let message = composeMessage(with: invite)
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        
        dismiss()
    }
}
