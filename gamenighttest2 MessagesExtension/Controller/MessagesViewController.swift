//
//  MessagesViewController.swift
//  gamenighttest2 MessagesExtension
//
//  Created by Daimen Ambers on 10/13/23.
//

import UIKit
import Messages
import EventKit

class MessagesViewController: MSMessagesAppViewController {
    static let storyboardIdentifier = "MessagesViewController"
    let eventHelper = EventHelper()
    var appState = AppState.home
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
        print("will become active")
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        presentViewController(for: conversation, with: presentationStyle)
        print("did receive")
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
        if let cancelMessage = CalendarInvite(message: message) {
            let eventStore = EKEventStore()
            guard let identifier = cancelMessage.identifier else {
                print("No event identifier available. Exiting the didCancelSending method")
                return
            }
            
            guard let eventToRemove = eventStore.event(withIdentifier: identifier) else {
                print("No event to remove. Exiting the didCancelSending method")
                return
            }
            
            do {
                try eventStore.remove(eventToRemove, span: .thisEvent, commit: true)
                print("Event Removed.")
            } catch {
                print("Could not remove the event with the error: \(error)")
            }
        }        
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
        removeAllChildViewControllers()
        print("Transition")
    }
    
    // FIXME: Changing presentation style will affect the calendar modal popup
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    // MARK: - Methods
    
    /// Presents the ViewContoller depending on the state of the application.
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        
        removeAllChildViewControllers()
        let controller: UIViewController
        
        setAppState(message: conversation.selectedMessage)
        
        switch presentationStyle {
        case .expanded:
            switch appState {
            case .gameInvite:
                
                if let calendarInvite = CalendarInvite(message: conversation.selectedMessage) {
                    controller = instantiateGameNightInviteViewController(with: calendarInvite)
                } else {
                    controller = instantiateHomeViewController(with: conversation)
                }
                
            case .randomizer:
                if let randomizer = Randomizer(message: conversation.selectedMessage) {
                    controller = instantiateRandomizerViewController(with: randomizer)
                } else {
                    controller = instantiateHomeViewController(with: conversation)
                }
                
            case .poll:
                if let poll = Poll(message: conversation.selectedMessage) {
                    controller = instantiateRatingViewController(with: poll)
                } else {
                    controller = instantiateHomeViewController(with: conversation)
                }
                
            default:
                controller = instantiateHomeViewController(with: conversation)
            }
        default:
            controller = instantiateHomeViewController(with: conversation)
        }

        
        addChild(controller)
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        NSLayoutConstraint.activate([
            controller.view.leftAnchor.constraint(equalTo: view.leftAnchor),
            controller.view.rightAnchor.constraint(equalTo: view.rightAnchor),
            controller.view.topAnchor.constraint(equalTo: view.topAnchor),
            controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        controller.didMove(toParent: self)
    }
    
    fileprivate func instantiateHomeViewController(with conversation: MSConversation) -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: HomeViewController.storyboardIdentifier) as? HomeViewController else {
            fatalError("Unable to instantiate a HomeViewController from the storyboard")
        }
        
        controller.conversation = conversation
        controller.delegate = self

        let navVC = UINavigationController(rootViewController: controller)
        
        return navVC
    }
    
    fileprivate func instantiateGameNightInviteViewController(with invite: CalendarInvite) -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: GameNightInviteViewController.storyboardIdentifier) as? GameNightInviteViewController else {
            fatalError("Unable to instantiate a GameNightViewController from the storyboard")
        }
        
        controller.invite = invite
        controller.delegate = self
        
        return controller
    }
    
    fileprivate func instantiateRandomizerViewController(with randomizer: Randomizer) -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: RandomizerViewController.storyboardIdentifier) as? RandomizerViewController else {
            fatalError("Unable to instantiate a RandomizerViewController from the storyboard")
        }
        
        controller.randomizer = randomizer
        controller.delegate = self
        
        return controller
    }
    
    fileprivate func instantiateRatingViewController(with poll: Poll) -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: RatingViewController.storyboardIdentifier) as? RatingViewController else {
            fatalError("Unable to instantiate a RateATopicViewController from the storyboard")
        }
        
        controller.poll = poll
        controller.editablePoll = poll
        controller.delegate = self
        
        let navVC = UINavigationController(rootViewController: controller)
        navVC.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor : UIColor.black]
        
        return controller
    }
    
    /// Composes a message for the Game Night Application.
    /// - Parameters:
    ///   - session: The conversation that the user currently has open.
    ///   - invite: A calender invite from the `CalendarInvite` Struct.
    /// - Returns: Returns a `MSMessage`.
    fileprivate func composeMessage(session: MSSession? = nil, with invite: MessageTemplateProtocol? = nil) -> MSMessage {
        var components = URLComponents()
        let layout = MSMessageTemplateLayout()
        
        if let myInvite = invite {
            components.queryItems = myInvite.queryItems
            
            layout.image = myInvite.image
            layout.caption = myInvite.caption
            layout.subcaption = myInvite.subCaption
        }
        
        print("Print the components: \(String(describing: components.queryItems))")
        
        let message = MSMessage(session: session ?? MSSession())
        message.url = components.url!
        message.layout = layout
        
        return message
    }
    
    /// Parse out the `appState` property in the URLComponents to set the correct game type from the conversation.
    /// - Parameter message: Take the current selected message.
    /// - Returns: The state of the app.
    fileprivate func setAppState(message: MSMessage?) {
        guard let messageURL = message?.url else { return }
        guard let urlComponents = NSURLComponents(url: messageURL, resolvingAgainstBaseURL: false) else { return }
        guard let queryItems = urlComponents.queryItems else { return }
        
        for queryItem in queryItems {
            guard let value = queryItem.value else { continue }
            if queryItem.name == "App State" && value == AppState.gameInvite.rawValue {
                self.appState = .gameInvite
            }
            
            if queryItem.name == "App State" && value == AppState.randomizer.rawValue {
                self.appState = .randomizer
            }
            
            if queryItem.name == "App State" && value == AppState.poll.rawValue {
                self.appState = .poll
            }
        }
    }
    
    // MARK: Convenience
    private func removeAllChildViewControllers() {
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
    }
}

// MARK: - Extensions
extension MessagesViewController: MessageDelegate {
    func sendMessage(using template: MessageTemplateProtocol?) {
        guard let conversation = activeConversation else { fatalError("Could not send a message.") }

        let message = composeMessage(session: conversation.selectedMessage?.session, with: template)
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        
        dismiss()
    }
    
    func changeAppState(to currentState: AppState) {
        print("The current app state is: \(currentState)")
        appState = currentState
    }
    
    
    func changePresentationStyle(_ style: MSMessagesAppPresentationStyle) {
        requestPresentationStyle(style)
    }
}
